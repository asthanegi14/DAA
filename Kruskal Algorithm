import java.util.*;
class Node {
    int v,u,w;
    Node(int v,int u,int w)
    {
        this.v=v;
        this.u=u;
        this.w=w;
    }
    Node(){}
    int getV(){return v;}
    int getU(){return u;}
    int getW(){return w;}
}
class SortComparator implements Comparator<Node>{
    @Override
    public int compare(Node node1, Node node2)
    {
       if(node1.getW()<node2.getW()){return -1;}
       if(node1.getW()>node2.getW()){return 1;}
       return 0;
    }
}
class SolveAlgo {
    int findpar(int u,int par[])
    {
        if(u==par[u])
        {
            return u;
        }
        return par[u] = findpar(par[u],par);
    }
    void union(int v,int u,int par[],int rank[])
    {
        u = findpar(u,par);
        v = findpar(v,par);
        if(rank[v]<rank[u])
        {
            par[v]=u;
        }
        else if(rank[v]>rank[u])
        {
            par[u]=v;
        }
        else
        {
            par[u]=v;
            rank[u]++;
        }
    }
       public void kruskal(ArrayList<Node> adj, int node)
       {
           Collections.sort(adj,new SortComparator());
           int par[] = new int[node];
           int rank[] = new int[node];
           ArrayList<Node> mst = new ArrayList<Node>();

           for(int i=0;i<node;i++)
           {
               par[i]=i;
               rank[i]=0;
           }
           int cost =0;
           for(Node i:adj)
           {
               if(findpar(i.getV(),par) != findpar(i.getU(),par))
               {
                   cost += i.getW();
                   mst.add(i);
                   union(i.getV(),i.getU(),par,rank);
               }
           }
           System.out.print("total weight = "+cost);
           System.out.println("\nshortest path is ");
           for(Node i:mst)
           {
               System.out.print("form "+i.getV()+" to "+i.getU());
               System.out.println();
           }
       }
}
public class KruskalAlgo {
    public static void main(String arg[])
    {
        int node = 5;
        ArrayList<Node> adj = new ArrayList<Node>();
        adj.add(new Node(0,1,2));
        adj.add(new Node(0,3,6));
        adj.add(new Node(1,3,8));
        adj.add(new Node(1,2,3));
        adj.add(new Node(1,4,5));
        adj.add(new Node(2,0,7));
        SolveAlgo s = new SolveAlgo();
        s.kruskal(adj,node);

    }
}
